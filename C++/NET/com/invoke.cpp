/**
Calling .Net code form C++ (native)

Tested on:
    - Ms. Visual Studio 2017 Community Ed.

All experiment is using execution schema "load .dll file"
See also "schema.cpp" inside directory "schemas" for other schemas.

Compile:
    (MSVC)
    $ cl invoke.cpp

Run:
    $ invoke
*/
#include <iostream>
#include <atlsafe.h>

// Import the type library
// This one is generated by regasm.exe
#import "CalledDll.tlb" raw_interfaces_only
using namespace CalledDll;

//========================== Static & Globals ==========================

//========================== Helper  Function ==========================

//======================================================================
int main()
{
    HRESULT result;
    long    retval;

    // Initialize COM
    result = CoInitialize(NULL);

    // Create the interface pointer
    ICalledPtr icalc(__uuidof(Called));

    // Example 1: method that return integer
    std::cout << "Example 1: Function that return integer" << std::endl;
    icalc->magic(&retval);
    std::cout << "The magic is " << retval << std::endl;
    std::cout << std::endl;

    // Example 2: method that require array of string
    std::cout << "Example 2: Function that requre array of string" << std::endl;
    CComSafeArray<BSTR>  array(5);
    for (int i = 0; i < 5; i++)
        array.SetAt(i, SysAllocString(CT2W("Reversing.ID")), false);
    array.SetAt(2, SysAllocString(CT2W("Xathrya")), false);
    icalc->hello(array);
    std::cout << std::endl;

    // Example 3: method that require multiple argument
    std::cout << "Example 3: Function that require multiple argument" << std::endl;
    icalc->multi(135, 182);
    std::cout << std::endl;
    
    // Uninitialize COM
    CoUninitialize();    

    return 0;
}
